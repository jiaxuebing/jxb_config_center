========================================================================================================================
//1 加载需要延迟执行的任务
       //1.1 初始化需要执行的任务，存放到zset中

          //2 定时检查延迟任务的状态：新增、修改、删除
          //2.1 如果删除，需要从zset中删除该任务以及list中删除【执行时需要判断该任务是否还存在】
          //2.2 新增及修改，需要将任务放到zset中


          //3 定时判断延迟任务是否需要执行【完成】infTestFilter

          //4 消费延迟任务 infTestConsumer
             4.1 判断当前任务是否需要变动

========================================================================================================================
1、执行启动、暂停、停止
    controller方法控制
    一个实例对象就可以实现

    定时任务执行器：停止
    1) 控制运行的====【Listener、Filter、Consumer】结束====  runStatus变为stop
    2）清理ListenerList、zset以及task_hash数据

    定时任务执行器：启动
    初始化，启动=====Listener、Filter、Consumer

    定时任务执行器：暂停
    Listener、Filter、Consumer  ======  暂停 wait

    定时任务执行器：继续
    Listener、Filter、Consumer ======  notify

    定时任务执行器：重启
    执行--停止，启动

========================================================================================================================
初始化Initializer：
  1）查询需要定时执行的任务信息----推送到zset中。id  score
       定时相关信息插入hash中：key=infTest:task_hash_+id  //// field value

========================================================================================================================
监听Listener：
  1）修改、新增、删除任务之后，封装消息推送到ListenerList中进行处理【只针对】
     添加Listener逻辑：
       //封装信息，推送数据到ListenerList中

     Listener处理逻辑：
       operaType：new
       处理：if(schedule_flag=on){//开启定时执行
                   //同时，将数据推送到hash中【id、scheduleFlag、scheduleRate、scheduleUnit】
              }

       operaType: update
       处理：
              if(存在hash中){
                if(after.scheduleFlag=ON){
                  //判断是否修改scheduleRate、scheduleUnit
                  if(before(scheduleRate * scheduleUnit) != after(shceduleRate * scheduleUnit)){
                    //推送到zset,修改hash中的task
                  }else{
                    //修改hash数据
                  }
                }else{
                  //删除hash中的数据
                  //删除zset、list中的数据
                }
              }else if(不存在hash中){
                if(after.scheduleFlag=ON){
                   //添加数据到--hash，同时推送数据到--zset
                }
              }

       operaType: delete
       处理：
              if(存在hash中){
                //删除hash数据，zset删除、list删除
              }

========================================================================================================================
2、接口测试任务执行逻辑
   1）根据id，查询task任务，需要参数---执行。
      //查询环境参数
      //

========================================================================================================================
1、登录之后，自动处理cookie操作 httpclient
